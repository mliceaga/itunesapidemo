{"ast":null,"code":"var _jsxFileName = \"/home/mariano/itunesapi/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Box from '@material-ui/core/Box';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport FormControl from '@material-ui/core/FormControl';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport { Button } from '@material-ui/core';\nconst styles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  dense: {\n    marginTop: theme.spacing(2)\n  },\n  menu: {\n    width: 200\n  }\n}));\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickBtn = this.onClickBtn.bind(this);\n    this.textInputArtist = React.createRef();\n    this.textInputAlbum = React.createRef();\n  }\n\n  onClickBtn() {\n    // Accessing the ref using this.refs.inputField\n    const artist = this.textInputArtist.current.value;\n    const album = this.textInputAlbum.current.value;\n\n    if (artist !== '') {\n      axios.get('https://itunes.apple.com/search?term=' + this.textInputArtist.current.value + '&entity=album&media=music&attribute=artistTerm').then(response => {\n        console.log(response.data);\n      }).catch(error => {\n        console.log(error);\n      });\n    } else if (album !== '') {\n      axios.get('https://itunes.apple.com/search?term=' + this.textInputArtist.current.value + '&entity=musicArtist&media=music&attribute=albumTerm') //      axios.get('https://itunes.apple.com/search?term='+ this.textInputAlbum.current.value +'&entity=media&media=music&attribute=albumTerm')\n      .then(response => {\n        console.log(response.data);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Container, {\n      maxWidth: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      component: \"div\",\n      style: {\n        backgroundColor: '#cfe8fc',\n        height: '100vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      className: classes.container,\n      noValidate: true,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Box, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Search by artist:\", React.createElement(\"input\", {\n      id: \"artistinput\",\n      type: \"text\",\n      ref: this.textInputArtist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      type: \"submit\",\n      onClick: this.onClickBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Search by artist\")), React.createElement(Box, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Search by album:\", React.createElement(\"input\", {\n      id: \"albuminput\",\n      type: \"text\",\n      ref: this.textInputAlbum,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      type: \"submit\",\n      onClick: this.onClickBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Search by album\")), \"Listar albums o artistas, (1), paginados (2)pantalla que muestre todos los albums de un artista (3)hacer pantalla que muestre todos los temas del album por album\")))));\n  }\n\n}\n\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["/home/mariano/itunesapi/src/App.js"],"names":["React","Box","Toolbar","FormControl","CssBaseline","Typography","Container","clsx","makeStyles","withStyles","TextField","axios","Button","styles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","dense","marginTop","menu","width","App","Component","constructor","props","onClickBtn","bind","textInputArtist","createRef","textInputAlbum","artist","current","value","album","get","then","response","console","log","data","catch","error","render","classes","backgroundColor","height","button"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Box from '@material-ui/core/Box';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport FormControl from '@material-ui/core/FormControl';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport { Button } from '@material-ui/core';\n\nconst styles =\n  makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  dense: {\n    marginTop: theme.spacing(2),\n  },\n  menu: {\n    width: 200,\n  },\n}));\n\nclass App extends React.Component {\n   constructor(props) {\n     super(props);\n     this.onClickBtn = this.onClickBtn.bind(this);\n     this.textInputArtist = React.createRef();\n     this.textInputAlbum = React.createRef();\n  }\n\n  onClickBtn() {\n    // Accessing the ref using this.refs.inputField\n    const artist = this.textInputArtist.current.value;\n    const album = this.textInputAlbum.current.value;\n\n    if(artist !== '')\n    {\n        axios.get('https://itunes.apple.com/search?term='+ this.textInputArtist.current.value +'&entity=album&media=music&attribute=artistTerm')\n        .then(response => {\n          console.log(response.data);\n          })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n    else if(album !== '')\n    {\n              axios.get('https://itunes.apple.com/search?term='+ this.textInputArtist.current.value +'&entity=musicArtist&media=music&attribute=albumTerm')  \n//      axios.get('https://itunes.apple.com/search?term='+ this.textInputAlbum.current.value +'&entity=media&media=music&attribute=albumTerm')\n          .then(response => {\n          console.log(response.data);\n          })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  };\n\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n        <React.Fragment>\n        <CssBaseline />\n        <Container maxWidth=\"sm\">\n          <Typography component=\"div\" style={{ backgroundColor: '#cfe8fc', height: '100vh' }}>\n          <div style={{ width: '100%' }}>\n          <FormControl className={classes.container} noValidate autoComplete=\"off\">\n           <Box>\n            {\"Search by artist:\"}\n             <input\n              id=\"artistinput\"\n              type=\"text\"\n              ref={this.textInputArtist}\n            />\n            <Button variant=\"contained\" color=\"primary\" className={classes.button} type=\"submit\" onClick={this.onClickBtn}>Search by artist</Button>\n            </Box>\n            <Box>\n              {\"Search by album:\"}\n              <input\n                id=\"albuminput\"\n                type=\"text\"\n                ref={this.textInputAlbum}\n              />\n              <Button variant=\"contained\" color=\"primary\" className={classes.button} type=\"submit\" onClick={this.onClickBtn}>Search by album</Button>\n            </Box>\n            Listar albums o artistas, (1), paginados\n            (2)pantalla que muestre todos los albums de un artista\n            (3)hacer pantalla que muestre todos los temas del album por album\n         </FormControl>\n         </div>\n         </Typography>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);"]},"metadata":{},"sourceType":"module"}